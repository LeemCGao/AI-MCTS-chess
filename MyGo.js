!function(g){var I={};function C(A){if(I[A])return I[A].exports;var l=I[A]={i:A,l:!1,exports:{}};return g[A].call(l.exports,l,l.exports,C),l.l=!0,l.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var l in g)C.d(A,l,function(I){return g[I]}.bind(null,l));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/Cell.js\n\r\nclass Cell{\r\n    constructor(x, y, color, head, next, state, idx) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color || 0;\r\n        this.head = head || this;\r\n        this.next = next;\r\n        this.state = state;\r\n        this.qi = {};\r\n        this.idx = idx;\r\n\r\n        this.initQi();\r\n    }\r\n\r\n    initQi(){\r\n        let x = this.x;\r\n        let y = this.y;\r\n        if(y-1>=0){\r\n            let idx = this.state.xy2idx(x,y-1);\r\n            if(!this.state.cellMap[idx]){\r\n                this.qi[idx] = true;\r\n            }\r\n        }\r\n        if(y+1<this.state.boardWidth){\r\n            let idx = this.state.xy2idx(x,y+1);\r\n            if(!this.state.cellMap[idx]){\r\n                this.qi[idx] = true;\r\n            }\r\n        }\r\n        if(x-1>=0){\r\n            let idx = this.state.xy2idx(x-1,y);\r\n            if(!this.state.cellMap[idx]){\r\n                this.qi[idx] = true;\r\n            }\r\n        }\r\n        if(x+1<this.state.boardWidth){\r\n            let idx = this.state.xy2idx(x+1,y);\r\n            if(!this.state.cellMap[idx]){\r\n                this.qi[idx] = true;\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    clone(){\r\n        return new Cell(this.x, this.y, this.color, this.head, this.next, this.state, this.idx);\r\n    }\r\n\r\n    mergeBlock(cell2){\r\n        \r\n        for(let idx2 in cell2.qi){\r\n            if(idx2 == this.idx){\r\n                delete cell2.qi[idx2];\r\n                for(let idx in this.qi){\r\n                    cell2.qi[idx] = true;\r\n                }\r\n                this.qi = cell2.qi;\r\n\r\n                let cell = this;\r\n                while(cell.next){\r\n                    cell = cell.next;\r\n                }\r\n                cell.next = cell2;\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    deleteQi(cell2){\r\n        for(let idx in this.qi){\r\n            if(idx == cell2.idx){\r\n                delete this.qi[idx];\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addQi(cell3){\r\n\r\n        let cell2 = cell3;\r\n        do{\r\n            let cell = this;\r\n            do{\r\n                if(cell.idx-this.state.boardWidth == cell2.idx || cell.idx+this.state.boardWidth == cell2.idx || cell.x>0&&cell.idx-1 == cell2.idx || cell.x<this.state.boardWidth-1&&cell.idx+1 == cell2.idx){\r\n                    this.qi[cell2.idx] = true;\r\n                    break;\r\n                }\r\n                cell = cell.next;\r\n            }while(cell);\r\n            cell2 = cell2.next;\r\n        }while(cell2);\r\n\r\n    }\r\n\r\n    getQiCount(){\r\n\r\n        let count = 0;\r\n        for(let idx in this.qi){\r\n            count ++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    getCount(){\r\n\r\n        let count = 1;\r\n        let cell = this;\r\n        while(cell.next){\r\n            count ++;\r\n            cell = cell.next;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var src_Cell = (Cell);\n// CONCATENATED MODULE: ./src/Node.js\n//mcts的节点\r\n\r\n\r\n\r\nclass Node_Node{\r\n    constructor(param){\r\n        this.father = param.father;\r\n        this.ucb = Infinity;\r\n        this.Q = 0;\r\n        this.N = 0;\r\n        this.children = [];\r\n        this.maxUCBChild = null;\r\n        this.state = param.state;\r\n    }\r\n\r\n    runOnce(){\r\n        let selectedNode = this;\r\n\r\n        while(selectedNode.children.length>0){\r\n            selectedNode = selectedNode.setMaxUCBChild();\r\n        }\r\n\r\n        if(selectedNode.N>0){\r\n            if(selectedNode.end){\r\n                this.backpropagation(selectedNode.winColor, selectedNode);\r\n                return;\r\n            }\r\n            selectedNode.createChildren();\r\n            if(selectedNode.end){\r\n                this.backpropagation(selectedNode.winColor, selectedNode);\r\n                return;\r\n            }\r\n            selectedNode = selectedNode.children[0];\r\n        }\r\n\r\n        let winColor = selectedNode.simulate();\r\n        let node = selectedNode;\r\n\r\n        this.backpropagation(winColor, node);\r\n        \r\n    }\r\n\r\n    backpropagation(winColor, node){\r\n        do{\r\n            node.updateQN(winColor);\r\n            node = node.father;\r\n        }while(node);\r\n    }\r\n\r\n    updateQN(winColor){\r\n        this.N++;\r\n        if(winColor===this.state.lastMove.color){\r\n            this.Q++;\r\n        }\r\n    }\r\n\r\n    setMaxUCBChild(){\r\n        let max = -Infinity;\r\n        for(let idx in this.children){\r\n            let ucb = this.children[idx].updateUCB();\r\n            if(ucb>max){\r\n                max = ucb;\r\n                this.maxUCBChild = this.children[idx];\r\n            }\r\n        }\r\n        return this.maxUCBChild;\r\n    }\r\n\r\n    getMaxNChild(){\r\n        let max = -Infinity;\r\n        let best;\r\n        for(let idx in this.children){\r\n            let N = this.children[idx].N;\r\n            if(N>max){\r\n                max = N;\r\n                best = this.children[idx];\r\n            }else if(N===max){\r\n                if(this.children[idx].Q>best.Q){\r\n                    max = N;\r\n                    best = this.children[idx];\r\n                }\r\n            }\r\n        }\r\n        return best;\r\n    }\r\n\r\n    createChildren(){\r\n        let color = -this.state.lastMove.color;\r\n        for(let x=0; x<this.state.boardWidth; x++){\r\n            for(let y=0; y<this.state.boardWidth; y++){\r\n                let idx = this.state.xy2idx(x,y);\r\n                if(!this.state.cellMap[idx]){\r\n                    let state = this.state.checkPiece(x,y,color);\r\n                    if(state){\r\n                        let node = new Node_Node({\r\n                            state: state,\r\n                            father: this,\r\n                        });\r\n                        this.children.push(node);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        }\r\n\r\n        if(this.children.length===0){\r\n            if(this.state.lastMove.x===-1){\r\n                this.end = true;\r\n            }else{\r\n                let idx = this.state.xy2idx(-1,-1);\r\n                let state = this.state.clone();\r\n                let cell = new src_Cell(-1, -1, color, null, null, state, idx);\r\n                state.lastMove = cell;\r\n                let node = new Node_Node({\r\n                    state: state,\r\n                    father: this,\r\n                });\r\n                this.children.push(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    simulate(){\r\n        let lastX;\r\n        let end = false;\r\n        let state = this.state;\r\n        do{\r\n\r\n            let color = -state.lastMove.color;\r\n            let normalMove = [];\r\n            // let fillEyeMove = [];\r\n            let oneQiMove = [];\r\n            for(let x=0; x<state.boardWidth; x++){\r\n                for(let y=0; y<state.boardWidth; y++){\r\n                    let idx = state.xy2idx(x,y);\r\n                    if(!state.cellMap[idx]){\r\n                        let checkRes = state.checkPiece(x,y,color);\r\n                        if(checkRes){\r\n                            if(checkRes.result === 1){\r\n                                normalMove.push(checkRes);\r\n                            }else if(checkRes.result === 2){\r\n                                // fillEyeMove.push(checkRes);\r\n                            }else if(checkRes.result === 3){\r\n                                oneQiMove.push(checkRes);\r\n                            }\r\n\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n\r\n            let allMove = normalMove.concat(oneQiMove);\r\n            if(normalMove.length===0){\r\n\r\n                let idx = state.xy2idx(-1,-1);\r\n                let state1 = state.clone();\r\n                let cell = new src_Cell(-1, -1, color, null, null, state1, idx);\r\n                state1.lastMove = cell;\r\n                allMove.push(state1);\r\n            }\r\n\r\n            let selectIdx = this.getRandomInt(allMove.length);\r\n\r\n            let selected = allMove[selectIdx];\r\n\r\n            if(selected.lastMove.x === -1){\r\n                if(lastX === -1){\r\n                    end = true;\r\n                }\r\n            }\r\n            lastX = selected.lastMove.x;\r\n\r\n            state = selected;\r\n        }while(!end);\r\n\r\n        let winColor = this.getWinColor(state);\r\n\r\n        this.winColor = winColor;\r\n        return winColor;\r\n\r\n    }\r\n\r\n    getWinColor(state){\r\n        let black = 0;\r\n        let white = 0;\r\n\r\n        let blackQi = {};\r\n        let whiteQi = {};\r\n\r\n        let blocks = state.blocks;\r\n        for(let i=0; i<blocks.length; i++){\r\n            let ziCount = blocks[i].getCount();\r\n\r\n            if(blocks[i].color === 1){\r\n                black += ziCount;\r\n                for(let idx in blocks[i].qi){\r\n                    blackQi[idx] = true;\r\n                }\r\n            }else{\r\n                white += ziCount;\r\n                for(let idx in blocks[i].qi){\r\n                    whiteQi[idx] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        let blackQiCount = 0;\r\n        let whiteQiCount = 0;\r\n        for(let k in blackQi){\r\n            blackQiCount ++;\r\n        }\r\n        for(let k in whiteQi){\r\n            whiteQiCount ++;\r\n        }\r\n        black += blackQiCount;\r\n        white += whiteQiCount;\r\n\r\n        if(black>white){\r\n            return 1;\r\n        }else{\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n      }\r\n\r\n    updateUCB(){\r\n        if(this.N===0){\r\n            return Infinity;\r\n        }\r\n        this.ucb = this.Q/this.N + Math.sqrt(2*Math.log(this.father.N)/this.N);\r\n        return this.ucb;\r\n    }\r\n\r\n    getChild(x,y){\r\n        for(let idx in this.children){\r\n            let lastMove = this.children[idx].state.lastMove;\r\n            if(lastMove.x===x&&lastMove.y===y){\r\n                return this.children[idx];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/* harmony default export */ var src_Node = (Node_Node);\n// CONCATENATED MODULE: ./src/State.js\n\r\n\r\nclass State_State{\r\n    constructor(param) {\r\n        this.cellMap = {};\r\n        this.blocks = [];\r\n        this.boardWidth = param.boardWidth;\r\n        this.lastMove = param.lastMove;\r\n    }\r\n\r\n    xy2idx(x,y){\r\n        return y*this.boardWidth+x;\r\n    }\r\n\r\n    idx2xy(idx){\r\n        let x = idx%this.boardWidth;\r\n        let y = (idx-x)/this.boardWidth;\r\n        return [x,y];\r\n    }\r\n\r\n    clone(){\r\n        let state = new State_State({\r\n            boardWidth: this.boardWidth,\r\n            lastMove: this.lastMove\r\n        });\r\n        state.jie = this.jie;\r\n\r\n        let cellMap = {};\r\n        for(let idx in this.cellMap){\r\n            cellMap[idx] = this.cellMap[idx];\r\n        }\r\n        state.cellMap = cellMap;\r\n\r\n        let blocks = [];\r\n        for(let i=0; i<this.blocks.length; i++){\r\n            let head = this.blocks[i];\r\n            let head2 = new src_Cell(head.x, head.y, head.color, null, null, state, head.idx);\r\n\r\n            let qi = {};\r\n            for(let idxQi in head.qi){\r\n                qi[idxQi] = head.qi[idxQi];\r\n            }\r\n            head2.qi = qi;\r\n\r\n            let head3 = head2;\r\n\r\n            while(head.next){\r\n                head = head.next;\r\n                let child2 = new src_Cell(head.x, head.y, head.color, null, null, state, head.idx);\r\n                head3.next = child2;\r\n                head3 = child2;\r\n            }\r\n\r\n            blocks.push(head2);\r\n        }\r\n        state.blocks = blocks;\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n    checkPiece(x,y,color){\r\n        let state = this.clone();\r\n        let result = state.placePiece(x,y,color);\r\n        if(result){\r\n            state.result = result;\r\n            return state;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    placePiece(x,y,color){\r\n\r\n        let idx = this.xy2idx(x,y);\r\n        let cell = new src_Cell(x,y,color,null,null,this,idx);\r\n\r\n        this.cellMap[idx] = color;\r\n\r\n        //合并\r\n        let hasMerge = false;\r\n        for(let i = 0; i < this.blocks.length; i++) {\r\n\r\n            if(this.blocks[i].color !== color) {\r\n                continue;\r\n            }\r\n\r\n           let merge = cell.mergeBlock(this.blocks[i]);\r\n           if(merge){\r\n                hasMerge = true;\r\n                this.blocks.splice(i,1);\r\n                i--;\r\n           }\r\n        }\r\n\r\n        this.blocks.push(cell);\r\n\r\n        let jie;\r\n        //判断提\r\n        let hasKill = false;\r\n        for(let i = 0; i < this.blocks.length; i++) {\r\n            if(this.blocks[i].color === color) {\r\n                continue;\r\n            }\r\n\r\n            let del = this.blocks[i].deleteQi(cell);\r\n            if(del){\r\n                let qiCount = this.blocks[i].getQiCount();\r\n                if(qiCount === 0) {\r\n\r\n                    let ziCount = this.blocks[i].getCount();\r\n\r\n                    //jie\r\n                    if(this.jie){\r\n                        if(cell.idx == this.jie.idx){\r\n                            \r\n                            if(ziCount===1){\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    hasKill = true;\r\n\r\n                    if(ziCount===1){\r\n                        jie = this.blocks[i];\r\n                    }\r\n\r\n                    //加气\r\n                    for(let j = 0; j < this.blocks.length; j++) {\r\n\r\n                        if(this.blocks[j].color !== color) {\r\n                            continue;\r\n                        }\r\n            \r\n                        this.blocks[j].addQi(this.blocks[i]);\r\n                    }\r\n\r\n                    let cellKilled = this.blocks[i];\r\n                    do{\r\n                        delete this.cellMap[cellKilled.idx];\r\n                        cellKilled = cellKilled.next;\r\n                    }while(cellKilled);\r\n                   \r\n                    this.blocks.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        let cellQi = cell.getQiCount();\r\n        let hasQi = cellQi>0;\r\n\r\n        if(!hasKill && !hasQi){\r\n            return false;\r\n        }else{\r\n            this.lastMove = cell;\r\n            this.jie = jie;\r\n\r\n            let result = 1;\r\n            if(!hasKill){\r\n                let fillEye = this.checkEye(cell);\r\n                if(fillEye){\r\n                    result = 2;\r\n                }else{\r\n                    if(cellQi === 1){\r\n                        result = 3;\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n    }\r\n\r\n    checkEye(cell){\r\n        let x = cell.x;\r\n        let y = cell.y;\r\n        let color = cell.color;\r\n        let isEye = true;\r\n\r\n        if(y-1>=0){\r\n            let idx = this.xy2idx(x,y-1);\r\n            if(this.cellMap[idx]!=color){\r\n                return false;\r\n            }\r\n        }\r\n        if(y+1<this.boardWidth){\r\n            let idx = this.xy2idx(x,y+1);\r\n            if(this.cellMap[idx]!=color){\r\n                return false;\r\n            }\r\n        }\r\n        if(x-1>=0){\r\n            let idx = this.xy2idx(x-1,y);\r\n            if(this.cellMap[idx]!=color){\r\n                return false;\r\n            }\r\n        }\r\n        if(x+1<this.boardWidth){\r\n            let idx = this.xy2idx(x+1,y);\r\n            if(this.cellMap[idx]!=color){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        let corner = 0;\r\n        let enemy = 0;\r\n        if(x-1>=0){\r\n            if(y-1>=0){\r\n                corner++;\r\n                let idx = this.xy2idx(x-1,y-1);\r\n                if(this.cellMap[idx]==-color){\r\n                    enemy++;\r\n                }\r\n            }\r\n            if(y+1<this.boardWidth){\r\n                corner++;\r\n                let idx = this.xy2idx(x-1,y+1);\r\n                if(this.cellMap[idx]==-color){\r\n                    enemy++;\r\n                }\r\n            }\r\n        }\r\n        if(x+1<this.boardWidth){\r\n            if(y-1>=0){\r\n                corner++;\r\n                let idx = this.xy2idx(x+1,y-1);\r\n                if(this.cellMap[idx]==-color){\r\n                    enemy++;\r\n                }\r\n            }\r\n            if(y+1<this.boardWidth){\r\n                corner++;\r\n                let idx = this.xy2idx(x+1,y+1);\r\n                if(this.cellMap[idx]==-color){\r\n                    enemy++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(enemy/corner>=0.5){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var src_State = (State_State);\n// CONCATENATED MODULE: ./src/Game.js\n\r\n\r\n\r\n\r\nclass Game_Game{\r\n    constructor(boardWidth) {\r\n        this.curColor = 1;\r\n        this.boardWidth = boardWidth || 5;\r\n        this.curState = new src_State({\r\n            boardWidth: this.boardWidth,\r\n            \r\n        });\r\n        this.curState.lastMove = new src_Cell(-1,-1,-1,null,null,this.curState,this.curState.xy2idx(-1,-1));\r\n        this.node = new src_Node({\r\n            state: this.curState\r\n        });\r\n        \r\n    }\r\n\r\n    //人机对弈\r\n    placePiece(x,y,color){\r\n\r\n        if(color===1){\r\n            let state = this.checkPiece(x,y,color);\r\n            if(state){\r\n                this.curState = state;\r\n                this.curColor = -this.curColor;\r\n\r\n                //ai\r\n                let node = this.node.getChild(x,y);\r\n                if(!node){\r\n                    node = new src_Node({\r\n                        state: this.curState\r\n                    });\r\n                }\r\n                for(let i=0; i<1000; i++){\r\n                    node.runOnce();\r\n                }\r\n                let bestChild = node.getMaxNChild();\r\n                if(bestChild){\r\n                    // let cell = bestChild.state.lastMove;\r\n                    this.curState = bestChild.state;\r\n                    this.curColor = -this.curColor;\r\n                    this.node = bestChild;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //人人对弈\r\n    placePiecePVP(x,y,color){\r\n        let state = this.checkPiece(x,y,color);\r\n        if(state){\r\n            this.curState = state;\r\n            this.curColor = -this.curColor;\r\n        }\r\n    }\r\n\r\n    checkPiece(x,y,color){\r\n        let state = this.curState.clone();\r\n        let valid = state.placePiece(x,y,color);\r\n        if(valid){\r\n            return state;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var src_Game = (Game_Game);\n// CONCATENATED MODULE: ./src/main.js\n\r\n\r\nlet MyGo = {};\r\nMyGo.Game = src_Game;\r\n\r\nwindow.MyGo = MyGo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);